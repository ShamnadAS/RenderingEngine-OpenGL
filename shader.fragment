#version 330 core

struct Material
{
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};

struct DirLight
{
	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};
struct PointLight
{
	vec3 position;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float constant;
	float linear;
	float quadratic;
};
struct SpotLight
{
	vec3 direction;
	vec3 position;
	float innerCutOff;
	float outerCutOff;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float constant;
	float linear;
	float quadratic;
};
#define NR_POINT_LIGHTS 4

out vec4 FragColor;

in vec2 TexCoords;
in vec3 Normal;
in vec3 FragPos;

uniform vec3 viewPos;
uniform Material material;
uniform DirLight dirLight;
uniform SpotLight spotLight;
uniform PointLight pointLight[NR_POINT_LIGHTS];

//function prototype
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir);
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 viewDir, vec3 fragPos);
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 viewDir, vec3 fragPos);

void main()
{
   vec3 norm = normalize(Normal);
   vec3 viewDir = normalize(viewPos - FragPos); //from fragment to camera

   vec3 result = CalcDirLight(dirLight, norm, viewDir);
   result += CalcSpotLight(spotLight, norm, viewDir, FragPos);
   for(int i = 0; i < NR_POINT_LIGHTS; i++)
   {
   		result += CalcPointLight(pointLight[i], norm, viewDir, FragPos);
   }

   FragColor = vec4( result, 1.0f );
}

vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir)
{
   vec3 lightDir = normalize(vec3(light.direction));

   //ambient
   vec3 ambient = light.ambient * texture(material.diffuse, TexCoords).rgb;

   //diffuse
   float diff = max(dot(normal, -lightDir), 0.0);
   vec3 diffuse = light.diffuse * diff * texture(material.diffuse, TexCoords).rgb;  

   //specular	
   vec3 reflectDir = reflect(lightDir, normal);
   float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
   vec3 specular = spec * light.specular * texture(material.specular, TexCoords).rgb;

   return ambient + diffuse + specular;
}

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 viewDir, vec3 fragPos)
{
   vec3 lightDir = normalize(fragPos - light.position); //from source to fragment

   // attenuation
   float distance = length(light.position - fragPos);
   float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    

   //ambient
   vec3 ambient = light.ambient * texture(material.diffuse, TexCoords).rgb;
   //diffuse
   float diff = max(dot(normal, -lightDir), 0.0);
   vec3 diffuse = light.diffuse * diff * texture(material.diffuse, TexCoords).rgb;  
   //specular	
   vec3 reflectDir = reflect(lightDir, normal);
   float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
   vec3 specular = spec * light.specular * texture(material.specular, TexCoords).rgb;

   ambient *= attenuation;
   diffuse *= attenuation;
   specular *= attenuation;

   return ambient + diffuse + specular;
}

vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 viewDir, vec3 fragPos)
{
   vec3 lightDir = normalize(fragPos - light.position); //from source to the fragment
   
   // attenuation
   float distance = length(light.position - fragPos);
   float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
   
   //ambient
   vec3 ambient = light.ambient * texture(material.diffuse, TexCoords).rgb;
   //diffuse
   float diff = max(dot(normal, -lightDir), 0.0);
   vec3 diffuse = light.diffuse * diff * texture(material.diffuse, TexCoords).rgb;  
   //specular	
   vec3 reflectDir = reflect(lightDir, normal);
   float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
   vec3 specular = spec * light.specular * texture(material.specular, TexCoords).rgb;
   
   //Intensity calculation
   float theta = dot(lightDir, light.direction);
   float epsilon = light.innerCutOff - light.outerCutOff; //positive value
   float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
   
   ambient *= intensity * attenuation;
   diffuse *= intensity * attenuation;
   specular *= intensity * attenuation;

   return ambient + diffuse + specular;
}
